/* notes
  
    responsive letter spacing formula: calc((x)px - (0.0y)em)

    container padding usually between 10 - 40px or 1.66667rem

    recommended max-width for text - 560px 
    
    element structure => 
    section.background-color
    div.margin
    div.container
    div.row/.col-row
    div.column/.restrictor
    div (optional) .wrapper 
    [content]
    
*/

@import "node_modules/normalize.scss/normalize.scss",
  "node_modules/sassy-gridlover/sassy-gridlover/config",
  "node_modules/sassy-gridlover/sassy-gridlover/sassy-gridlover";

@function calc-u($factor) {
  @return $basic-unit * $factor;
}

@function calc-multiple-of($dividend) {
  @return $basic-unit * round($dividend / $basic-unit);
}

// --------------------------------------------------------- website color
$website-color-base: #000;
$website-color-secondary: #fff;

// --------------------------------------------------------- unit of measurement for spacing (based on 8px grid)

$basic-unit: 8px;

// --------------------------------------------------------- container padding & wi0dth : ($container-padding) also sets column padding and negative row margin

$container-width: calc-multiple-of(1230px);
$container-padding: calc-multiple-of(15px);

// --------------------------------------------------------- section margin

$margin-base: calc-multiple-of(60px);

// --------------------------------------------------------- typography settings

// $MINOR_SECOND: 1.067;
// $MAJOR_SECOND: 1.125;
// $MINOR_THIRD: 1.2;
// $MAJOR_THIRD: 1.25;
// $PERFECT_FOURTH: 1.333;
// $AUGMENTED_FOURTH: 1.414;
// $PERFECT_FIFTH: 1.5;
// $MINOR_SIXTH: 1.6;
// $GOLDEN_SECTION: 1.618;
// $MAJOR_SIXTH: 1.667;
// $MINOR_SEVENTH: 1.778;
// $MAJOR_SEVENTH: 1.875;
// $OCTAVE: 2;
// $MAJOR_TENTH: 2.5;
// $MAJOR_ELEVENTH: 2.667;
// $MAJOR_TWELFTH: 3;
// $DOUBLE_OCTAVE: 4;

$sgl-base-font-size: 24;
$sgl-base-line-height: 1.3;
$sgl-scale-factor: $PERFECT_FIFTH;
$sgl-debug-mode: true;
$sgl-debug-mode-max-width: 1224; // Only needed if `$sgl-debug-mode` is `true`.
$sgl-extras: false;

// --------------------------------------------------------- font family

$font-family-base: serif;
$font-family-header: sans-serif;

// --------------------------------------------------------- font color

$font-color-base: #000;
$font-color-header: #000;
$font-color-additional: (
  "subheader": #eee
);

// --------------------------------------------------------- link behavior

$link-decoration: none !important;
$link-hover-decoration: none !important;

// --------------------------------------------------------- link color

$link-color-base: #000;
$link-color-hover: none;

// --------------------------------------------------------- background color

$background-colors: (
  "white": #fff,
  "black": #000,
  "grey": #eee
);

// --------------------------------------------------------- no of delineators

$no-of-columns: 12 !default;
$no-of-restrictors: 12 !default;

// --------------------------------------------------------- breakpoints

$breakpoints: (
  "phone": calc-multiple-of(450px),
  "phablet": calc-multiple-of(540px),
  "tablet-small": calc-multiple-of(640px),
  "tablet": calc-multiple-of(768px),
  "tablet-wide": calc-multiple-of(1024px),
  "desktop": calc-multiple-of(1248px),
  "desktop-wide": calc-multiple-of(1440px),
  "container": calc-multiple-of($container-width)
);

// --------------------------------------------------------- root

@mixin create-max($no-of-columns) {
  @for $i from 2 through $no-of-columns {
    &.m#{$i} {
      flex-basis: 100% / $i;
    }
  }
}

@mixin create-columns($no-of-columns) {
  @for $i from 1 through $no-of-columns {
    @if $i / $no-of-columns * 100 == 25 {
      .col-#{$i},
      .col-fourth {
        flex-basis: $i / $no-of-columns * 100%;
      }
    } @else if $i / $no-of-columns * 100 == 20 {
      .col-#{$i},
      .col-fifth {
        flex-basis: $i / $no-of-columns * 100%;
      }
    } @else if $i / $no-of-columns * 100 == 33.333333 {
      .col-#{$i},
      .col-third {
        flex-basis: $i / $no-of-columns * 100%;
      }
    } @else if $i / $no-of-columns * 100 == 40 {
      .col-#{$i},
      .col-two-fifths {
        flex-basis: $i / $no-of-columns * 100%;
      }
    } @else if $i / $no-of-columns * 100 == 50 {
      .col-#{$i},
      .col-half {
        flex-basis: $i / $no-of-columns * 100%;
      }
    } @else if $i / $no-of-columns * 100 == 60 {
      .col-#{$i},
      .col-three-fifths {
        flex-basis: $i / $no-of-columns * 100%;
      }
    } @else if $i / $no-of-columns * 100 == 66.66667 {
      .col-#{$i},
      .col-two-thirds {
        flex-basis: $i / $no-of-columns * 100%;
      }
    } @else if $i / $no-of-columns * 100 == 75 {
      .col-#{$i},
      .col-three-fourths {
        flex-basis: $i / $no-of-columns * 100%;
      }
    } @else if $i / $no-of-columns * 100 == 80 {
      .col-#{$i},
      .col-four-fifths {
        flex-basis: $i / $no-of-columns * 100%;
      }
    } @else if $i / $no-of-columns * 100 == 100 {
      .col-#{$i},
      .col-full {
        flex-basis: $i / $no-of-columns * 100%;
      }
    } @else {
      .col-#{$i} {
        flex-basis: $i / $no-of-columns * 100%;
      }
    }
  }
}

@mixin create-restrictors($no-of-restrictors) {
  @for $i from 1 through $no-of-restrictors {
    @if $i / $no-of-restrictors * 100 == 25 {
      .restrictor-#{$i},
      .restrictor-fourth {
        max-width: $i / $no-of-restrictors * 100%;
      }
    } @else if $i / $no-of-restrictors * 100 == 20 {
      .restrictor-#{$i},
      .restrictor-fifth {
        max-width: $i / $no-of-restrictors * 100%;
      }
    } @else if $i / $no-of-restrictors * 100 == 33.333333 {
      .restrictor-#{$i},
      .restrictor-third {
        max-width: $i / $no-of-restrictors * 100%;
      }
    } @else if $i / $no-of-restrictors * 100 == 40 {
      .restrictor-#{$i},
      .restrictor-two-fifths {
        max-width: $i / $no-of-restrictors * 100%;
      }
    } @else if $i / $no-of-restrictors * 100 == 50 {
      .restrictor-#{$i},
      .restrictor-half {
        max-width: $i / $no-of-restrictors * 100%;
      }
    } @else if $i / $no-of-restrictors * 100 == 60 {
      .restrictor-#{$i},
      .restrictor-three-fifths {
        max-width: $i / $no-of-restrictors * 100%;
      }
    } @else if $i / $no-of-restrictors * 100 == 66.66667 {
      .restrictor-#{$i},
      .restrictor-two-thirds {
        max-width: $i / $no-of-restrictors * 100%;
      }
    } @else if $i / $no-of-restrictors * 100 == 75 {
      .restrictor-#{$i},
      .restrictor-three-fourths {
        max-width: $i / $no-of-restrictors * 100%;
      }
    } @else if $i / $no-of-restrictors * 100 == 80 {
      .restrictor-#{$i},
      .restrictor-four-fifths {
        max-width: $i / $no-of-restrictors * 100%;
      }
    } @else if $i / $no-of-restrictors * 100 == 100 {
      .restrictor-#{$i},
      .restrictor-full {
        max-width: $i / $no-of-restrictors * 100%;
      }
    } @else {
      .restrictor-#{$i} {
        max-width: $i / $no-of-restrictors * 100%;
      }
    }
  }
}

@mixin create-positions() {
  @for $i from 1 through ($no-of-columns - 1) {
    @if $i / $no-of-columns * 100 == 25 {
      .position-#{$i},
      .position-fourth {
        margin-left: $i / $no-of-columns * 100%;
      }
    } @else if $i / $no-of-columns * 100 == 20 {
      .position-#{$i},
      .position-fifth {
        margin-left: $i / $no-of-columns * 100%;
      }
    } @else if $i / $no-of-columns * 100 == 33.333333 {
      .position-#{$i},
      .position-third {
        margin-left: $i / $no-of-columns * 100%;
      }
    } @else if $i / $no-of-columns * 100 == 40 {
      .position-#{$i},
      .position-two-fifths {
        margin-left: $i / $no-of-columns * 100%;
      }
    } @else if $i / $no-of-columns * 100 == 50 {
      .position-#{$i},
      .position-half {
        margin-left: $i / $no-of-columns * 100%;
      }
    } @else if $i / $no-of-columns * 100 == 60 {
      .position-#{$i},
      .position-three-fifths {
        margin-left: $i / $no-of-columns * 100%;
      }
    } @else if $i / $no-of-columns * 100 == 66.66667 {
      .position-#{$i},
      .position-two-thirds {
        margin-left: $i / $no-of-columns * 100%;
      }
    } @else if $i / $no-of-columns * 100 == 75 {
      .position-#{$i},
      .position-three-fourths {
        margin-left: $i / $no-of-columns * 100%;
      }
    } @else if $i / $no-of-columns * 100 == 80 {
      .position-#{$i},
      .position-four-fifths {
        margin-left: $i / $no-of-columns * 100%;
      }
    } @else {
      .position-#{$i} {
        margin-left: $i / $no-of-columns * 100%;
      }
    }
  }
}

@mixin create-headers(
  $font-size-step,
  $line-height-step,
  $margin-top-step,
  $margin-bottom-step,
  $unit: $sgl-base-unit,
  $base-value: $font-size-base
) {
  @if $line-height-step == 0 {
    $line-height-step: $font-size-step + 1;
  }

  $font-size: $font-size-base;
  $scale: $scale-factor;
  $computed-font-size: round(
    $font-size * sgl-exponent($scale, $font-size-step)
  );

  $line-height: round($font-size * $sgl-base-line-height);
  $computed-line-height: $line-height * $line-height-step;
  $margin-top: $line-height * $margin-top-step;
  $margin-bottom: $line-height * $margin-bottom-step;

  @if $sgl-debug-mode == true {
    @include sgl-show-margins(
      $margin-top,
      $margin-bottom,
      $computed-font-size,
      $unit
    );
  }

  @if $unit == "px" or $unit == "pxrem" {
    font-size: $computed-font-size * 1px;
    line-height: $computed-line-height * 1px;
    margin-top: $margin-top * 1px;
    margin-bottom: $margin-bottom * 1px;
  }

  @if $unit == "rem" or $unit == "pxrem" {
    font-size: sgl-decimal-ceil(
      sgl-rem-calc($computed-font-size, $base-value),
      5
    );
    line-height: sgl-decimal-ceil(
      sgl-rem-calc($computed-line-height, $base-value),
      5
    );
    margin-top: sgl-decimal-ceil(sgl-rem-calc($margin-top, $base-value), 5);
    margin-bottom: sgl-decimal-ceil(
      sgl-rem-calc($margin-bottom, $base-value),
      5
    );
  }

  @if $unit == "em" {
    font-size: sgl-decimal-ceil(
      sgl-em-calc($computed-font-size, $base-value),
      5
    );
    line-height: sgl-decimal-ceil(
      sgl-em-calc($computed-line-height, $computed-font-size),
      5
    );
    margin-top: sgl-decimal-ceil(
      sgl-em-calc($margin-top, $computed-font-size),
      5
    );
    margin-bottom: sgl-decimal-ceil(
      sgl-em-calc($margin-bottom, $computed-font-size),
      5
    );
  }
}

@mixin create-media-query($width, $type: max) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

@mixin absolute-center($position) {
  position: absolute;

  @if ($position == "vertical") {
    top: 50%;
    transform: translateY(-50%);
  } @else if ($position == "horizontal") {
    left: 50%;
    transform: translate(-50%);
  } @else if ($position == "both") {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

@mixin auto-center {
  margin: {
    left: auto;
    right: auto;
  }
}

@mixin pseudo($display: block, $pos: absolute, $content: "") {
  content: $content;
  display: $display;
  position: $pos;
}

@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// --------------------------------------------------------- utilities

template,
[hidden] {
  display: none;
}

template,
[full-screen] {
  height: 100vh;
  width: 100%;
  overflow: hidden;
}

template,
[full-image] {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  object-fit: cover;
}

template,
[full-background] {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  background-size: cover;
}

template,
[full-width] {
  width: 100%;
}

template,
[hide-overflow] {
  overflow: hidden;
}

template,
[copy-center] {
  text-align: center;
}

template,
[copy-white] {
  color: #fff;
}

// --------------------------------------------------------- background color

@each $background-name, $color-code in $background-colors {
  template,
  [fill-#{$background-name}] {
    background-color: $color-code;
  }
}

* {
  box-sizing: inherit;
}
*:before,
*:after {
  box-sizing: inherit;
}

body,
html {
  height: 100%;
  margin: 0;
  padding: 0;
}

html {
  text-rendering: optimizeLegibility;
  box-sizing: border-box;
}

body {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  color: $font-color-base;
  font-family: $font-family-base;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  color: $font-color-header;
  font-family: $font-family-header;
}

// --------------------------------------------------------- unordered list

ul.no-style {
  margin-left: 0;
  margin-bottom: 0;
  list-style: none;
}

ul.two {
  columns: 2;
}

// --------------------------------------------------------- copy color

@each $color-name, $color-code in $font-color-additional {
  .font-#{$color-name} {
    color: $color-code;
  }
}

// --------------------------------------------------------- margin

.margin-small {
  margin: $margin-base 0;
}

.margin-medium {
  margin: $margin-base * 1.66667 0;
}

.margin-large {
  margin: $margin-base * 2.3333 0;
}

.margin-xlarge {
  margin: $margin-base * 3.3333 0;
}

.margin-xxlarge {
  margin: $margin-base * 5 0;
}

.margin-small-top {
  margin-top: $margin-base;
}

.margin-medim-top {
  margin-top: $margin-base * 1.66667;
}

.margin-large-top {
  margin-top: $margin-base * 2.3333;
}

.margin-xlarge-top {
  margin-top: $margin-base * 3.3333;
}

.margin-xxlarge-top {
  margin-top: $margin-base * 5;
}

.margin-small-bottom {
  margin-bottom: $margin-base;
}

.margin-medium-bottom {
  margin-bottom: $margin-base * 1.66667;
}

.margin-large-bottom {
  margin-bottom: $margin-base * 2.3333;
}

.margin-xlarge-bottom {
  margin-bottom: $margin-base * 3.3333;
}

.margin-xxlarge-bottom {
  margin-bottom: $margin-base * 5;
}

// --------------------------------------------------------- responsive elements

@include create-media-query(phablet) {
  .margin-medium {
    margin: $margin-base 0;
  }

  .margin-large {
    margin: $margin-base 0;
  }

  .margin-xlarge {
    margin: $margin-base * 1.3333 0;
  }

  .margin-xxlarge {
    margin: $margin-base * 1.6667 0;
  }

  .margin-medim-top {
    margin-top: $margin-base;
  }

  .margin-large-top {
    margin-top: $margin-base;
  }

  .margin-xlarge-top {
    margin-top: $margin-base * 1.3333;
  }

  .margin-xxlarge-top {
    margin-top: $margin-base * 1.6667;
  }

  .margin-medium-bottom {
    margin-bottom: $margin-base;
  }

  .margin-large-bottom {
    margin-bottom: $margin-base;
  }

  .margin-xlarge-bottom {
    margin-bottom: $margin-base * 1.3333;
  }

  .margin-xxlarge-bottom {
    margin-bottom: $margin-base * 1.6667;
  }
}

section {
  overflow: hidden;
}

// --------------------------------------------------------- container

.container {
  @include auto-center;
  max-width: $container-width;
  display: flex;
  flex-wrap: wrap;
  width: 100%;
}

.container.unpack {
  margin-left: 0;
  margin-right: 0;
  max-width: unset;
}

.container.unpack > .row {
  margin-left: unset;
  margin-right: unset;
}

// --------------------------------------------------------- row

.row {
  flex: auto;
  display: flex;
  margin-left: -$container-padding / 2;
  margin-right: -$container-padding / 2;
}

.row.max {
  flex-wrap: wrap;
  @include create-max($no-of-columns);
}

// --------------------------------------------------------- column

.column {
  flex-basis: 0;
  flex-grow: 1;
  flex-shrink: 1;
  padding-right: $container-padding / 2;
  padding-left: $container-padding / 2;
}

.column.unpack {
  padding-right: unset;
  padding-left: unset;
}

// --------------------------------------------------------- column

@include create-restrictors($no-of-restrictors);
@include create-positions();

// --------------------------------------------------------- break col width at breakpoints

@each $breakpoint-name, $breakpoint-value in $breakpoints {
  @media only screen and (max-width: $breakpoint-value) {
    .break-#{$breakpoint-name} {
      flex-basis: 100%;
    }
  }
}
